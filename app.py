import pandas as pd
import numpy as np  # Import numpy
import seaborn as sns
import matplotlib.pyplot as plt
import shap
import streamlit as st

shap.initjs()

st.title('Company Analysis App')

# File uploader for the dataset
uploaded_file = st.file_uploader("Upload an Excel file", type=["xlsx"])

if uploaded_file is not None:
    # Load the dataset
    df = pd.read_excel(uploaded_file)

    # Create a list of unique company names
    company_names = df['company_name'].unique()
    company_names.sort()

    # Text widget for search input
    search_input = st.text_input('Search for a company', '')

    # Function to filter company names based on the search term
    def filter_company_names(search_term):
        if search_term.strip() == '':
            return company_names
        else:
            return [name for name in company_names if search_term.lower() in name.lower()]

    filtered_company_names = filter_company_names(search_input)

    # Company selection
    selected_company = st.selectbox('Choose a company:', filtered_company_names)

    # Filter DataFrame based on the selected company
    def filter_dataframe(company_name):
        return df[df['company_name'] == company_name].copy()

    # Plot sentiment label counts for each topic
    def sentiment_label_counts(filtered_df):
        topic_sentiment_counts = filtered_df.groupby(['Theme Name by Llama', 'adjusted_label']).size().unstack(fill_value=0)
        topic_sentiment_percentage = topic_sentiment_counts.div(topic_sentiment_counts.sum(axis=1), axis=0) * 100

        sns.set(style="whitegrid")
        plt.figure(figsize=(10, 8))
        colors = {'negative': '#ff686b', 'neutral': '#ffef9f', 'positive': '#c1fba4'}
        ax = topic_sentiment_percentage.plot(kind='bar', stacked=True, color=[colors[label] for label in topic_sentiment_counts.columns])
        plt.xlabel('')
        plt.ylabel('Percentage')
        plt.title('Sentiment Labels for Each Topic Generated by Llama')
        plt.xticks(rotation=90, ha='center')
        plt.legend(title='Sentiment Label', bbox_to_anchor=(1.05, 1), loc='upper left')

        for container in ax.containers:
            labels = [f'{int(value)}%' if not pd.isna(value) and value != 0 else '' for value in container.datavalues]
            ax.bar_label(container, labels=labels, label_type='center', rotation='vertical', fontsize=8)

        st.pyplot(plt)

    # Additional plotting functions
    def first_5_ai_gen_fnc(filtered_df):
        df_5_ai_gen = filtered_df.drop_duplicates(subset=['Theme Name by Llama'])
        df_5_ai_gen = df_5_ai_gen.replace({'%': ''}, regex=True)
        df_5_ai_gen = df_5_ai_gen.infer_objects(copy=False)
        df_5_ai_gen = df_5_ai_gen[['Theme Name by Llama', 'Life-balance', 'Cultural', 'Social', 'Economical', 'Development', 'Workload', 'Management']]
        df_5_ai_gen.iloc[:, 1:] = df_5_ai_gen.iloc[:, 1:].apply(pd.to_numeric)

        custom_colors = {'Management': '#FFADAD', 'Development': '#FFD6A5', 'Workload': '#FDFFB6', 'Economical': '#CAFFBF', 'Cultural': '#9BF6FF', 'Social': '#BDB2FF', 'Life-balance': '#FFC6FF'}
        df_5_ai_gen.set_index('Theme Name by Llama', inplace=True)
        df_5_ai_gen = df_5_ai_gen.loc[:, (df_5_ai_gen != 0).any(axis=0)]
        ax = df_5_ai_gen.plot(kind='bar', stacked=True, figsize=(10, 6), color=custom_colors.values())

        plt.xlabel('Themes Generated by AI')
        plt.ylabel('Percentage')
        plt.title('EVPs Distribution by Llama - generated Themes')
        plt.legend(title='EVPs', bbox_to_anchor=(1.05, 1), loc='upper left', labels=custom_colors.keys())

        for container in ax.containers:
            labels = [f'{int(value)}%' if not pd.isna(value) and value != 0 else '' for value in container.datavalues]
            ax.bar_label(container, labels=labels, label_type='center', rotation='vertical', fontsize=7, fontweight='bold')

        plt.tight_layout()
        st.pyplot(plt)

    def evp_job_experience(filtered_df):
        df_jobexperience = filtered_df[['Employment_period', 'Life-balance', 'Cultural', 'Social', 'Economical', 'Development', 'Workload', 'Management']]
        df_jobexperience = df_jobexperience.replace({'%': ''}, regex=True)
        df_jobexperience.iloc[:, 1:] = df_jobexperience.iloc[:, 1:].apply(pd.to_numeric)
        df_jobexperience = df_jobexperience[df_jobexperience['Employment_period'] != 'not stated']
        df_jobexperience = df_jobexperience.groupby('Employment_period').mean().reset_index()

        unique_experience = df_jobexperience['Employment_period'].unique()
        custom_order = ['до 3 месяцев', 'от 3 месяцев до 1 года', 'от 1 года до 3 лет', 'более 3 лет']
        df_jobexperience['Experience_Ordered'] = pd.Categorical(df_jobexperience['Employment_period'], categories=custom_order, ordered=True)

        custom_colors = {'Management': '#FFADAD', 'Development': '#FFD6A5', 'Workload': '#FDFFB6', 'Economical': '#CAFFBF', 'Cultural': '#9BF6FF', 'Social': '#BDB2FF', 'Life-balance': '#FFC6FF'}
        melted_df = pd.melt(df_jobexperience, id_vars=['Employment_period', 'Experience_Ordered'], var_name='Topic', value_name='EVPS')

        melted_df.sort_values(by='Experience_Ordered', inplace=True)
        custom_palette = [custom_colors[topic] for topic in melted_df['Topic'].unique()]

        plt.figure(figsize=(15, 10))
        ax = sns.barplot(data=melted_df, x='Experience_Ordered', y='EVPS', hue='Topic', palette=custom_palette)

        plt.xlabel('Employee\'s Experience')
        plt.ylabel('Percentage')
        plt.title('EVP Topics Distribution by Employee\'s Experience')
        plt.legend(title='Topic', bbox_to_anchor=(0.5, -0.4), loc='upper center', ncol=3, fancybox=True, shadow=True)

        for container in ax.containers:
            labels = [f'{int(value)}%' if not pd.isna(value) and value != 0 else '' for value in container.datavalues]
            ax.bar_label(container, labels=labels, label_type='edge', fontsize=8, fontweight='bold')

        plt.xticks(rotation=45)
        plt.tight_layout()
        st.pyplot(plt)

    def evp_job_categories(filtered_df):
        df_jobcategory = filtered_df[['job category', 'Life-balance', 'Cultural', 'Social', 'Economical', 'Development', 'Workload', 'Management']]
        df_jobcategory = df_jobcategory.replace({'%': ''}, regex=True)
        df_jobcategory.iloc[:, 1:] = df_jobcategory.iloc[:, 1:].apply(pd.to_numeric)
        df_jobcategory = df_jobcategory.groupby('job category').mean().reset_index()

        unique_experience = df_jobcategory['job category'].unique()
        custom_order = ['not stated', 'IT-employees', 'Managers', 'Other employees']
        df_jobcategory['Job_Categories_Ordered'] = pd.Categorical(df_jobcategory['job category'], categories=custom_order, ordered=True)

        custom_colors = {'Management': '#FFADAD', 'Development': '#FFD6A5', 'Workload': '#FDFFB6', 'Economical': '#CAFFBF', 'Cultural': '#9BF6FF', 'Social': '#BDB2FF', 'Life-balance': '#FFC6FF'}
        melted_df = pd.melt(df_jobcategory, id_vars=['job category', 'Job_Categories_Ordered'], var_name='Topic', value_name='EVPS')

        melted_df.sort_values(by='Job_Categories_Ordered', inplace=True)
        custom_palette = [custom_colors[topic] for topic in melted_df['Topic'].unique()]

        plt.figure(figsize=(15, 10))
        ax = sns.barplot(data=melted_df, x='Job_Categories_Ordered', y='EVPS', hue='Topic', palette=custom_palette)

        plt.xlabel('Job Category')
        plt.ylabel('Percentage')
        plt.title('EVP Topics Distribution by Job Category')
        plt.legend(title='Topic', bbox_to_anchor=(0.5, -0.4), loc='upper center', ncol=3, fancybox=True, shadow=True)

        for container in ax.containers:
            labels = [f'{int(value)}%' if not pd.isna(value) and value != 0 else '' for value in container.datavalues]
            ax.bar_label(container, labels=labels, label_type='edge', fontsize=8, fontweight='bold')

        plt.xticks(rotation=45)
        plt.tight_layout()
        st.pyplot(plt)

    def evp_by_year(filtered_df):
        df_year_distribution = filtered_df.copy()
        df_year_distribution['year'] = df_year_distribution['Date'].str[-4:]
        df_year_distribution = df_year_distribution[['year', 'Life-balance', 'Cultural', 'Social', 'Economical', 'Development', 'Workload', 'Management']]
        df_year_distribution = df_year_distribution.replace({'%': ''}, regex=True)
        df_year_distribution.iloc[:, 1:] = df_year_distribution.iloc[:, 1:].apply(pd.to_numeric)
        df_year_distribution = df_year_distribution.groupby('year').mean().reset_index()
        df_year_distribution['Years_Ordered'] = pd.Categorical(df_year_distribution['year'], categories=df_year_distribution['year'].unique(), ordered=True)

        custom_colors = {'Management': '#FFADAD', 'Development': '#FFD6A5', 'Workload': '#FDFFB6', 'Economical': '#CAFFBF', 'Cultural': '#9BF6FF', 'Social': '#BDB2FF', 'Life-balance': '#FFC6FF'}
        topics = ['Life-balance', 'Cultural', 'Social', 'Economical', 'Development', 'Workload', 'Management']

        fig, axs = plt.subplots(nrows=1, ncols=len(df_year_distribution['Years_Ordered'].unique()), figsize=(20, 10))
        if not isinstance(axs, np.ndarray):
            axs = [axs]

        legend_handles = []

        for i, year in enumerate(df_year_distribution['Years_Ordered'].unique()):
            year_data = df_year_distribution[df_year_distribution['Years_Ordered'] == year]
            sorted_data = year_data[topics].sort_values(by=year_data.index[0], axis=1, ascending=True)

            bars = axs[i].barh(range(len(sorted_data.columns)), sorted_data.values[0], color=[custom_colors[col] for col in sorted_data.columns])
            axs[i].set_title(f'{year}', fontsize=14)
            axs[i].tick_params(axis='both', labelsize=12)
            axs[i].set_yticks([])

            legend_handles.extend([bar for bar in bars])

            for container in axs[i].containers:
                labels = []
                for value in container.datavalues:
                    if not pd.isna(value) and value == 0:
                        labels.append('')
                    elif not pd.isna(value) and value.is_integer():
                        labels.append(f'{int(value)}%')
                    else:
                        formatted_label = f'{value:.1f}%' if not pd.isna(value) else ''
                        if '.0%' in formatted_label:
                            formatted_label = formatted_label.replace('.0%', '%')
                        labels.append(formatted_label)
                axs[i].bar_label(container, labels=labels, label_type='edge', fontsize=8, fontweight='bold')

        plt.subplots_adjust(wspace=0.3)
        fig.supxlabel('Percentage', fontsize=14)

        legend = fig.legend(legend_handles, topics, loc='lower center', ncol=len(topics), bbox_to_anchor=(0.5, -0.1))

        for handle, color in zip(legend.legendHandles, [custom_colors[topic] for topic in topics]):
            handle.set_facecolor(color)

        plt.show()
        st.pyplot(plt)

    # Filtering the DataFrame
    filtered_df = filter_dataframe(selected_company)

    # Displaying results and plots
    if st.button('Submit'):
        st.header(f'Selected Company: {selected_company}')
        sentiment_label_counts(filtered_df)
        first_5_ai_gen_fnc(filtered_df)
        evp_job_experience(filtered_df)
        evp_job_categories(filtered_df)
        evp_by_year(filtered_df)
else:
    st.warning("Please upload an Excel file to proceed.")
